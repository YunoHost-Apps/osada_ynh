#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
final_path=$(ynh_app_setting_get $app final_path)
upload=$(ynh_app_setting_get $app upload)
db_name=$(ynh_app_setting_get $app db_name)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# REMOVE APP MAIN DIR
#=================================================
 
# Create a temporary directory
tmpdir="$(mktemp -d)"
# Backup the config file in the temp dir
cp -a "$final_path/.htconfig.php" "$tmpdir/.htconfig.php"
cp -a "$final_path/store" "$tmpdir/store"
cp -a "$final_path/php.log" "$tmpdir/php.log"


# Remove the app directory securely
ynh_secure_remove "$final_path"

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"
sudo cp -a "$tmpdir/store" "${final_path}"
sudo cp -a "$tmpdir/.htconfig.php" "${final_path}"
sudo cp -a "$tmpdir/php.log" "${final_path}"
sudo rm -Rf "$tmpdir"
sudo chmod -R 777 $final_path/store
sudo mkdir $final_path/addon
ynh_setup_source "$final_path/addon" "app_addons"


#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

# Set right permissions for curl install
chown -R $app: $final_path

#=================================================
# PHP-FPM CONFIGURATION
#=================================================

# Create a dedicated php-fpm config
ynh_add_fpm_config

# Verify the checksum and backup the file if it's different
ynh_backup_if_checksum_is_different "$final_path/.htconfig.php"
# Recalculate and store the config file checksum into the app settings
ynh_store_file_checksum "$final_path/.htconfig.php"

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate  "$final_path/php.log" --non-append

# Set up poller
ynh_replace_string  "YNH_WWW_PATH" "$final_path" ../conf/poller-cron
ynh_replace_string "__USER__" "$app"  ../conf/poller-cron
sudo cp ../conf/poller-cron /etc/cron.d/$app

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_install_app_dependencies php-mbstring php5-cli 'php5-imagick|php-imagick' php5-gd php5-mcrypt 'php-xml|base-files(<<9.0)'


# Make app public
ynh_app_setting_set $app skipped_uris "/"

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
