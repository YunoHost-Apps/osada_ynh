#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
upload=$(ynh_app_setting_get --app=$app --key=upload)
last_update=$(grep  update_time: /etc/yunohost/apps/$app/settings.yml |  cut -c 14-)
database=$(ynh_app_setting_get --app=$app --key=database)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# REMOVE APP MAIN DIR
#=================================================
ynh_print_info "Upgrading source files..."

# Create a temporary directory
# tmpdir="$(ynh_smart_mktemp 6000)"
# Backup the config file in the temp dir
# cp -a "$final_path/.htconfig.php" "$tmpdir/.htconfig.php"
# cp -a "$final_path/store" "$tmpdir/store"
# cp -a "$final_path/php.log" "$tmpdir/php.log"

# Remove the app directory securely
# ynh_secure_remove "$final_path"

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

# cp -a "$tmpdir/store" "${final_path}"
# cp -a "$tmpdir/.htconfig.php" "${final_path}"
# cp -a "$tmpdir/php.log" "${final_path}"
# ynh_secure_remove "$tmpdir"
# chmod -R 777 $final_path/store
# mkdir $final_path/addon
# ynh_setup_source --dest_dir="$final_path/addon" --source_id="app_addons"
pushd "$final_path"
    util/udall
popd
chmod -R 775 $final_path/store
#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

# Set right permissions for curl install
chown -R $app: $final_path

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_print_info "Upgrading PHP-FPM configuration..."

# Create a dedicated php-fpm config
ynh_add_fpm_config --package="$extra_php_dependencies"

### Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
### And create a backup of this file if the checksum is different. So the file will be backed up if the admin had modified it.
ynh_backup_if_checksum_is_different --file="$final_path/.htconfig.php.back"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$final_path/.htconfig.php"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..."

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

# UPGRADE FAIL2BAN
#=================================================
ynh_script_progression --message="Re-configure Fail2Ban..."

ynh_add_fail2ban_config --logpath="$final_path/php.log" --failregex="^.*auth\.php.*failed login attempt.*from IP <HOST>.*$" --max_retry="5"

# Set cron job
ynh_print_info "Setting up cron job..."
ynh_replace_string  --match_string="YNH_WWW_PATH" --replace_string="$final_path" --target_file="../conf/poller-cron"
ynh_replace_string --match_string="__USER__" --replace_string="$app"  --target_file="../conf/poller-cron"
ynh_replace_string --match_string="__PHP_VERSION__" --replace_string="$phpversion"  --target_file="../conf/poller-cron"
cp -f ../conf/poller-cron /etc/cron.d/$app

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."
if [  $database -eq 1 ]; then
	#=================================================
	# CHECK VERSION FOR SPECIFIC MYSQL UPDATE
	#=================================================

	# Check version and if this version was a fresh install push mysql query
	db_name=$(ynh_app_setting_get --app=$app --key=db_name)
	db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)

elif [ $database -eq 2 ]; then
	ynh_install_app_dependencies $pkg_dependencies
fi

#=================================================
# SETUP SSOWAT
#=================================================
# As Osada is social network and have its own permission there is no need to keep Osada behind SSO
ynh_script_progression --message="Upgrading SSOwat configuration..."
ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
